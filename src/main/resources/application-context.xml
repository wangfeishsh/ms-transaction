<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- enable the configuration of transactional behavior based on annotations -->
	<!--<tx:annotation-driven transaction-manager="txManager"/> -->
	<!--a PlatformTransactionManager is still required -->

	<!-- this is the service object that we want to make transactional -->
	<bean id="fooService" class="com.example.service.DefaultFooService"/>

	<!-- this is the aspect -->
	<bean id="profiler" class="com.example.advice.SimpleProfiler">
		<!-- execute before the transactional advice (hence the lower order number) -->
		<property name="order" value="1"/>
	</bean>

	<tx:annotation-driven transaction-manager="txManager" order="200"/>

	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
	<!-- You can omit the transaction-manager attribute in the transactional advice ( <tx:advice/>)
	if the bean name of the PlatformTransactionManager that you want to wire in has the name transactionManager.
	If the PlatformTransactionManager bean that you want to wire in has any other name,
	then you must use the transaction-manager attribute explicitly, as in the preceding example. -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true"/>
			<!-- other methods use the default transaction settings (see below) -->
			<!-- Exception(s) that trigger rollback; comma-delimited. For example, com.foo.MyBusinessException,ServletException. -->
			<tx:method name="*" rollback-for="Throwable" no-rollback-for="InstrumentNotFoundException"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="entryPointMethod" expression="execution(* com.example..*Service.*(..))"/>
		<!-- will execute after the profiling advice (c.f. the order attribute) -->

		<aop:advisor advice-ref="txAdvice" pointcut-ref="entryPointMethod" order="2"/>
		<!-- order value is higher than the profiling aspect -->

		<aop:aspect id="profilingAspect" ref="profiler">
			<aop:pointcut id="serviceMethodWithReturnValue"
						  expression="execution(!void com.example..*Service.*(..))"/>
						  <!--expression="execution(!void com.example..*Service.*(..))"/>-->
			<aop:around method="profile" pointcut-ref="serviceMethodWithReturnValue"/>
		</aop:aspect>

	</aop:config>

	<!-- ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface -->
	<!--<aop:config>-->
		<!--&lt;!&ndash; this advice will execute around the transactional advice &ndash;&gt;-->
		<!--<aop:aspect id="profilingAspect" ref="profiler">-->
			<!--<aop:pointcut id="serviceMethodWithReturnValue"-->
						  <!--expression="execution(* com.example..*Service.*(..))"/>-->
						  <!--&lt;!&ndash;expression="execution(!void com.example..*Service.*(..))"/>&ndash;&gt;-->
			<!--<aop:around method="profile" pointcut-ref="serviceMethodWithReturnValue"/>-->
		<!--</aop:aspect>-->
	<!--</aop:config>-->

	<!--<aop:config>-->
		<!--<aop:pointcut id="fooServiceOperation" expression="execution(* com.example.service.FooService.*(..))"/>-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>-->
	<!--</aop:config>-->

	<!-- don't forget the DataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://127.0.0.1/baocy"/>
		<property name="username" value="root"/>
		<property name="password" value="123456"/>
	</bean>

	<!-- similarly, don't forget the PlatformTransactionManager -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="txManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
		<qualifier value="order"/>
	</bean>

	<bean id="txManager3" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
		<qualifier value="account"/>
	</bean>

	<!-- other <bean/> definitions here -->


	<!--
	<aop:config>
		<aop:pointcut id="defaultServiceOperation"
					  expression="execution(* x.y.service.*Service.*(..))"/>
		<aop:pointcut id="noTxServiceOperation"
					  expression="execution(* x.y.service.ddl.DefaultDdlManager.*(..))"/>
		<aop:advisor pointcut-ref="defaultServiceOperation" advice-ref="defaultTxAdvice"/>
		<aop:advisor pointcut-ref="noTxServiceOperation" advice-ref="noTxAdvice"/>

	</aop:config>

	 this bean will be transactional (see the 'defaultServiceOperation' pointcut)
	<bean id="fooService" class="x.y.service.DefaultFooService"/>
	 this bean will also be transactional, but with totally different transactional settings
	<bean id="anotherFooService" class="x.y.service.ddl.DefaultDdlManager"/>

	<tx:advice id="defaultTxAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<tx:advice id="noTxAdvice">
		<tx:attributes>
			<tx:method name="*" propagation="NEVER"/>
		</tx:attributes>
	</tx:advice>

   -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name = "dataSource" ref="dataSource"/>
	</bean>

	<bean id="sharedTransactionTemplate"
		  class="org.springframework.transaction.support.TransactionTemplate">
		<property name="isolationLevelName" value="ISOLATION_READ_UNCOMMITTED"/>
		<property name="timeout" value="30"/>
	</bean>


</beans>
